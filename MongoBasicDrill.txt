1.Get all
Find the command that retrieves all restaurants.
-----db.restaurants.find().pretty()-----


2.Limit and sort
Find the command that makes the first 10 restaurants appear when 
db.restaurants is alphabetically sorted by the name property.
-----db.restaurants.find().limit( 3 ).sort( { name: 1 } )-----


3.Get by _id
Retrieve a single restaurant by _id from the restaurants collection. 
This means you'll first need to get the _id for one of the restaurants 
imported into the database.
-----var documentId = ObjectId('5909298e054231f6ee280cc5');
     db.restaurants.findOne({_id: documentId});-----
	 
	 
4.Get by value
Write a command that gets all restaurants from the borough of "Queens".
-----db.restaurants
.find({borough: "Brooklyn"}, {_id: 1, name: 1, address: 1})
.limit(5).sort({name: 1});-----


5.Count
Write a command that gives the number of documents in db.restaurants.
-----db.restaurants.find({_id: documentId}).count();-----


6.Count by nested value
Write a command that gives the number of restaurants whose zip code 
value is '11206'. Note that this property is at document.address.zipcode, 
so you'll need to use dot notation to query on the nested zip code property.
-----db.restaurants.find({"address.zipcode":'11206'}).count()-----


7.Delete by id
Write a command that deletes a document from db.restaurants. 
This means you'll first need to get the _id for one of the restaurants 
imported into the database.
-----var objectId = db.restaurants.findOne({}, {_id: 1})._id
     db.restaurants.remove({_id: objectId});-----
	 
	 
8.Update a single document
Write a command that sets the name property of a document with a 
specific _id to 'Bizz Bar Bang'. Make sure that you're not replacing 
the existing document, but instead updating only the name property.
-----var objectId = db.restaurants.findOne({}, {_id: true})._id;
     db.restaurants.updateOne(
     {_id: objectId},
     {$set: {name: 'Bizz Bar Bang'}});-----
	 
	 
9.Update many documents
Uh oh, two zip codes are being merged! The '10035' zip code is being 
merged with '10036'. Write a command that updates values accordingly.
-----db.restaurants.updateMany(
  {'address.zipcode': '10035'},
  {$set: {'address.zipcode': '10036'}});
